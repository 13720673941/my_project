package designBase;

/*
 * 			java 运算符号 
 */

public class OperationalCharacter {
	
	
	// 一元运算符
	public static void testOne() {
		
		int a = 10;
		
		// 反向运算就是正负值转化
		System.out.println("运算符'-': -a = "+(-a));
		
		// 先使用再自加， 第一次已经再内存中输出结果为 11 ，实际输出还是 10
		System.out.println("运算符后'++': a = "+ a++);
		
		// 第二次使用的是内存中的值 11 
		System.out.println("运算符后使用a'++': a = "+ a);
		
		int b = 10;
				
		// 先自增再使用 类似 python中的 += 
		System.out.println("运算符前'++': b = "+ ++b);
		
	}
	
	// 二元运算符
	public static void testTwo() {
		
		// Java 语言中算术运算符的功能是进行算术运算，除了经常使用的加（+）、减（-）、乘（*）和除（\）外，还有取模运算（％）。加（+）、减（-）、乘（*）、除（\
		
		// *** 算术运算符都是双目运算符，即连接两个操作数的运算符。优先级上，*、/、％ 具有相同运算级别，并高于 +、-（+、- 具有相同级别）
		
		/*
		 * 进行算术运算时应注意以下两点：
		 * 求余（％）运算要求参与运算的两个操作数均为整型，不能为其他类型。
         * 两个整数进行除法运算，其结果仍为整数。如果整数与实数进行除法运算，则结果为实数
         * 例如：
		 * ①int x=2,y=1; 表达式 y/x 的结果是 0。
		 * ②float x=2.0f; int y=1; 表达式 y/x 的结果是 0.5
		 */
		
		System.out.println("整数运算：");
		
		System.out.printf("1+1=%d",1+1);
		
		System.out.printf("1-1=%d",1-1);
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		testOne();
		testTwo();
	}

}
